
.include "msp430g24x2.inc"
LOWNIB equ r6
HIGHNIB equ r7
OUTVAL equ r8
MASK1 equ r9
MASK2 equ r10
MASK3 equ r11
PIXCNT equ r12
ROWCNT equ r13

PIXELS equ #20
ROWS   equ #240


BLANK         equ       BIT4 ; P1.4 will blank display at end of current Frame if High , re-start on falling edge
BLANK_OUT     equ       P1OUT
BLANK_DIR     equ       P1DIR
BLANK_IN      equ       P1IN
BLANK_IE      equ       P1IE
BLANK_IES     equ       P1IES
BLANK_IFG     equ       P1IFG
BLANK_REN     equ       P1REN

DATA_RDY      equ       BIT3 ; use P1.3 to signal Data Ready at end of line

  org 0xe800
start:
  ;mov.w #0x5a80, &WDTCTL
  mov.w #WDTPW|WDTHOLD, &WDTCTL

0xe800: 0x40b2 mov.w #0x5a80, &0x0120                   cycles: 5
0xe802: 0x5a80
0xe804: 0x0120

  dint ; No interupts please

0xe806: 0xc232 dint  --  bic.w #8, SR                   cycles: 1

  
  ;store bitmasks for mainloop in registers to save cycles
  mov.w #0x10,MASK1

0xe808: 0x4039 mov.w #0x0010, r9                        cycles: 2
0xe80a: 0x0010

  mov.w #0x5f, MASK2 ;set bits 0-3,4 and 6 (Data,Clock and FLM)

0xe80c: 0x403a mov.w #0x005f, r10                       cycles: 2
0xe80e: 0x005f

  mov.w #0xf0,MASK3 ; set all high bits

0xe810: 0x403b mov.w #0x00f0, r11                       cycles: 2
0xe812: 0x00f0

  
  mov.b &CALBC1_16MHZ,&BCSCTL1 ;set clock

0xe814: 0x42d2 mov.b &0x10f9, &0x0057                   cycles: 6
0xe816: 0x10f9
0xe818: 0x0057

  mov.b &CALDCO_16MHZ,&DCOCTL

0xe81a: 0x42d2 mov.b &0x10f8, &0x0056                   cycles: 6
0xe81c: 0x10f8
0xe81e: 0x0056

  
  mov.w #0x2ff,SP ; setup stack

0xe820: 0x4031 mov.w #0x02ff, SP                        cycles: 2
0xe822: 0x02ff

  
  ;set up USI for master
  mov.b #(USIPE7 | USIPE6 | USIPE5 | USIMST | USIOE ),&USICTL0; // Port, SPI master, LSB First

0xe824: 0x40f2 mov.b #0xea, &0x0078                     cycles: 5
0xe826: 0x00ea
0xe828: 0x0078

  ;bis.b USIIE,&USICTL1 ; Counter interrupt, flag remains set
  mov.b #(USIDIV_1|USISSEL_2),&USICKCTL ; /2 SMCLK

0xe82a: 0x40f2 mov.b #0x28, &0x007a                     cycles: 5
0xe82c: 0x0028
0xe82e: 0x007a

  bic.b #USIIFG,&USICTL1

0xe830: 0xc3d2 bic.b #1, &0x0079                        cycles: 4
0xe832: 0x0079

  bic.b #USISWRST,&USICTL0 ; USI released for operation

0xe834: 0xc3d2 bic.b #1, &0x0078                        cycles: 4
0xe836: 0x0078

  
  ;initialize counters
  mov PIXELS,PIXCNT ;16bits * 20 = 320 pixels

0xe838: 0x403c mov.w #0x0014, r12                       cycles: 2
0xe83a: 0x0014

  mov ROWS,ROWCNT

0xe83c: 0x403d mov.w #0x00f0, r13                       cycles: 2
0xe83e: 0x00f0

  
  mov.b #0x00, &P2SEL ; Turn off XTal

0xe840: 0x43c2 mov.b #0, &0x002e                        cycles: 4
0xe842: 0x002e

  mov.b #0xff, &P2DIR ;set all of P2 as output

0xe844: 0x43f2 mov.b #-1, &0x002a                       cycles: 4
0xe846: 0x002a

  ;mov.b #0x01, &P1DIR ;set  P1.0 as output
  SetupP1:   
  mov.b   #0x0,&P1OUT		  ;turn off all P1 outputs

0xe848: 0x43c2 mov.b #0, &0x0021                        cycles: 4
0xe84a: 0x0021

  bis.b   #0x07,&P1DIR            ; P1.0,P1.1 and P1.2 output

0xe84c: 0xd0f2 bis.b #0x07, &0x0022                     cycles: 5
0xe84e: 0x0007
0xe850: 0x0022

  bis.b	  #0x08,&P1REN		  ; Set P1.3 Pulldown

0xe852: 0xd2f2 bis.b #8, &0x0027                        cycles: 4
0xe854: 0x0027

  ;bis.b   #0x0C,&P1SEL            ; P1.2 and P1.3 TA1/2 otions
  ;SetupC0:     
  ;mov.w   #160,&TACCR0              ; PWM Period/2
  ;SetupC1:    
  ;mov.w   #OUTMOD_4,&TACCTL1        ; CCR1 toggle
  ;mov.w   #80,&TACCR1               ; CCR1 PWM Duty Cycle	
  ;SetupTA:     
  ;mov.w   #TASSEL_2+MC_0,&TACTL   ; SMCLK, Stop Timer for now
  ;bis.b #0x01,&P1OUT
  mov #0x3210,&USISR

0xe856: 0x40b2 mov.w #0x3210, &0x007c                   cycles: 5
0xe858: 0x3210
0xe85a: 0x007c

Blank:
  bic.b #0x01,&P1OUT ;turn off backlight

0xe85c: 0xc3d2 bic.b #1, &0x0021                        cycles: 4
0xe85e: 0x0021

  bis.b #0x02,&P1OUT; turn off VEE

0xe860: 0xd3e2 bis.b #2, &0x0021                        cycles: 4
0xe862: 0x0021

  ;mov.w #MC_0,&TACTL ; Turn off Timer
  ; set up p1.4 interupt on falling edge
  bis.b #BLANK,&BLANK_REN

0xe864: 0xd0f2 bis.b #0x10, &0x0027                     cycles: 5
0xe866: 0x0010
0xe868: 0x0027

  bic.b #BLANK,&BLANK_OUT

0xe86a: 0xc0f2 bic.b #0x10, &0x0021                     cycles: 5
0xe86c: 0x0010
0xe86e: 0x0021

  bis.b #BLANK,&BLANK_IES

0xe870: 0xd0f2 bis.b #0x10, &0x0024                     cycles: 5
0xe872: 0x0010
0xe874: 0x0024

  bic.b #BLANK,&BLANK_IFG

0xe876: 0xc0f2 bic.b #0x10, &0x0023                     cycles: 5
0xe878: 0x0010
0xe87a: 0x0023

  bis.b #BLANK,&BLANK_IE

0xe87c: 0xd0f2 bis.b #0x10, &0x0025                     cycles: 5
0xe87e: 0x0010
0xe880: 0x0025

  
  eint ;allow interupts so we can wake back up

0xe882: 0xd232 eint  --  bis.w #8, SR                   cycles: 1

  bis.b #(LPM0 + GIE),SR ;go to sleep, wake up on interupt Slave needs to setup first Pixel before releasing P1.4

0xe884: 0xd072 bis.b #0x18, SR                          cycles: 2
0xe886: 0x0018

  dint ; No interupts please

0xe888: 0xc232 dint  --  bic.w #8, SR                   cycles: 1

  bic.b #0x02,&P1OUT ; turn on VEE

0xe88a: 0xc3e2 bic.b #2, &0x0021                        cycles: 4
0xe88c: 0x0021

  
  mov #0x3210,&USISR

0xe88e: 0x40b2 mov.w #0x3210, &0x007c                   cycles: 5
0xe890: 0x3210
0xe892: 0x007c

  
  mov.b #0x50,&USICNT ;get first pixel

0xe894: 0x40f2 mov.b #0x50, &0x007b                     cycles: 5
0xe896: 0x0050
0xe898: 0x007b

  mov.w #32,LOWNIB

0xe89a: 0x4036 mov.w #0x0020, r6                        cycles: 2
0xe89c: 0x0020

Wait:
  dec LOWNIB

0xe89e: 0x8316 sub.w #1, r6                             cycles: 1

  jnz Wait

0xe8a0: 0x23fe jne 0xe89e  (offset: -4)                 cycles: 2

  
  bis.b #0x01,&P1OUT ;turn on backlight

0xe8a2: 0xd3d2 bis.b #1, &0x0021                        cycles: 4
0xe8a4: 0x0021

  
MainLoop:
  mov &USISR,LOWNIB ; get current pixel

0xe8a6: 0x4216 mov.w &0x007c, r6                        cycles: 3
0xe8a8: 0x007c

  
  mov.b #0x50,&USICNT ;start next xfer

0xe8aa: 0x40f2 mov.b #0x50, &0x007b                     cycles: 5
0xe8ac: 0x0050
0xe8ae: 0x007b

  mov LOWNIB,HIGHNIB

0xe8b0: 0x4607 mov.w r6, r7                             cycles: 1

  mov LOWNIB,OUTVAL

0xe8b2: 0x4608 mov.w r6, r8                             cycles: 1

  bis MASK3,OUTVAL

0xe8b4: 0xdb08 bis.w r11, r8                            cycles: 1

  and MASK2,OUTVAL

0xe8b6: 0xfa08 and.w r10, r8                            cycles: 1

  mov.b OUTVAL,&P2OUT

0xe8b8: 0x48c2 mov.b r8, &0x0029                        cycles: 4
0xe8ba: 0x0029

  rra HIGHNIB

0xe8bc: 0x1107 rra.w r7                                 cycles: 1

  rra HIGHNIB

0xe8be: 0x1107 rra.w r7                                 cycles: 1

  rra HIGHNIB

0xe8c0: 0x1107 rra.w r7                                 cycles: 1

  rra HIGHNIB

0xe8c2: 0x1107 rra.w r7                                 cycles: 1

  bic.b MASK1,&P2OUT ; toggle clock

0xe8c4: 0xc9c2 bic.b r9, &0x0029                        cycles: 4
0xe8c6: 0x0029

  
  ;bic.b #USIIFG,&USICTL1
  mov HIGHNIB,OUTVAL

0xe8c8: 0x4708 mov.w r7, r8                             cycles: 1

  bis MASK3,OUTVAL ;set clock and flm bits

0xe8ca: 0xdb08 bis.w r11, r8                            cycles: 1

  and MASK2,OUTVAL

0xe8cc: 0xfa08 and.w r10, r8                            cycles: 1

  mov.b OUTVAL,&P2OUT

0xe8ce: 0x48c2 mov.b r8, &0x0029                        cycles: 4
0xe8d0: 0x0029

  swpb LOWNIB

0xe8d2: 0x1086 swpb r6                                  cycles: 1

  bic.b MASK1,&P2OUT ;toggle clock

0xe8d4: 0xc9c2 bic.b r9, &0x0029                        cycles: 4
0xe8d6: 0x0029

  mov LOWNIB,OUTVAL ;swap LOWNIB to get second Pixel

0xe8d8: 0x4608 mov.w r6, r8                             cycles: 1

  bis MASK3,OUTVAL ;set clock and flm bits

0xe8da: 0xdb08 bis.w r11, r8                            cycles: 1

  and MASK2,OUTVAL

0xe8dc: 0xfa08 and.w r10, r8                            cycles: 1

  mov.b OUTVAL,&P2OUT

0xe8de: 0x48c2 mov.b r8, &0x0029                        cycles: 4
0xe8e0: 0x0029

  swpb HIGHNIB ; swap HIGHNIB to get 2nd Pixel

0xe8e2: 0x1087 swpb r7                                  cycles: 1

  bic.b MASK1,&P2OUT ;toggle clock

0xe8e4: 0xc9c2 bic.b r9, &0x0029                        cycles: 4
0xe8e6: 0x0029

  mov HIGHNIB,OUTVAL

0xe8e8: 0x4708 mov.w r7, r8                             cycles: 1

  bis MASK3,OUTVAL ;set clock and flm bits

0xe8ea: 0xdb08 bis.w r11, r8                            cycles: 1

  and MASK2,OUTVAL

0xe8ec: 0xfa08 and.w r10, r8                            cycles: 1

  mov.b OUTVAL,&P2OUT

0xe8ee: 0x48c2 mov.b r8, &0x0029                        cycles: 4
0xe8f0: 0x0029

  
  bic.b MASK1,&P2OUT ;toggle clock

0xe8f2: 0xc9c2 bic.b r9, &0x0029                        cycles: 4
0xe8f4: 0x0029

  ;bis.b #0x04,&P1OUT ; set FS high
  dec PIXCNT

0xe8f6: 0x831c sub.w #1, r12                            cycles: 1

  ;end of row ?
  jnz MainLoop

0xe8f8: 0x23d6 jne 0xe8a6  (offset: -84)                cycles: 2

  ;toggle row clock
  bis.b #0x20,&P2OUT

0xe8fa: 0xd0f2 bis.b #0x20, &0x0029                     cycles: 5
0xe8fc: 0x0020
0xe8fe: 0x0029

  
  bic.b #0x40,MASK2 ;turn off FLM

0xe900: 0xc07a bic.b #0x40, r10                         cycles: 2
0xe902: 0x0040

  xor.b #0x80,MASK2 ;toggle M

0xe904: 0xe07a xor.b #0x80, r10                         cycles: 2
0xe906: 0x0080

  mov PIXELS,PIXCNT ;reload pixel counter

0xe908: 0x403c mov.w #0x0014, r12                       cycles: 2
0xe90a: 0x0014

  bic.b #0x20,&P2OUT ; load row

0xe90c: 0xc0f2 bic.b #0x20, &0x0029                     cycles: 5
0xe90e: 0x0020
0xe910: 0x0029

;Data_Rdy:
 ; bit.b #DATA_RDY,&P1IN ; check p1.3, if high, stop updating screen
  ;jeq Data_Rdy
  dec ROWCNT

0xe912: 0x831d sub.w #1, r13                            cycles: 1

  ;end of screen ?
  jnz MainLoop

0xe914: 0x23c8 jne 0xe8a6  (offset: -112)               cycles: 2

  
  
  bis.b #0x40,MASK2; set flm bit

0xe916: 0xd07a bis.b #0x40, r10                         cycles: 2
0xe918: 0x0040

  
  ;bis.b #0x01,&P1OUT ;turn on LED
 
  mov ROWS,ROWCNT ;reset row counter

0xe91a: 0x403d mov.w #0x00f0, r13                       cycles: 2
0xe91c: 0x00f0

  bit.b #BLANK,&P1IN ; check p1.4, if high, stop updating screen

0xe91e: 0xb0f2 bit.b #0x10, &0x0020                     cycles: 5
0xe920: 0x0010
0xe922: 0x0020

  jc Blank

0xe924: 0x2f9b jhs 0xe85c  (offset: -202)               cycles: 2

  jmp MainLoop ; start over 

0xe926: 0x3fbf jmp 0xe8a6  (offset: -130)               cycles: 2


Wakeup_int:
  mov.b #0,&BLANK_IFG

0xe928: 0x43c2 mov.b #0, &0x0023                        cycles: 4
0xe92a: 0x0023

  bic.b #BLANK,&BLANK_IE

0xe92c: 0xc0f2 bic.b #0x10, &0x0025                     cycles: 5
0xe92e: 0x0010
0xe930: 0x0025

  bic.w #CPUOFF,0(SP)

0xe932: 0xc0b1 bic.w #0x0010, 0x0(SP)                   cycles: 5
0xe934: 0x0010
0xe936: 0x0000

  reti

0xe938: 0x1300 reti                                     cycles: 5

  
  ;org 0xfffe
  ;dw start             ; set reset vector to 'init' label
 org 0xffe4
vectors:
  dw Wakeup_int ;18
  dw 0 ;19
  dw 0 ;20
  dw 0 ;21
  dw 0 ;22
  dw 0 ;23      
  dw 0 ;24
  dw 0 ;25
  dw 0 ;26
  dw 0 ;27
  dw 0 ;28
  dw 0 ;29
  dw 0 ;30
  dw start                 ; Reset 31


data sections:
ffe4: 28 e9 00 00 00 00 00 00 00 00 00 00 00 00 00 00  (...............
fff4: 00 00 00 00 00 00 00 00 00 00 00 e8              ............


Program Info:
Include Paths: .
               /usr/local/share/naken_asm/include
 Instructions: 84
   Code Bytes: 314
   Data Bytes: 28
  Low Address: e800 (59392)
 High Address: ffff (65535)

